# mod07 monikko
import random

# monikko eli (tuple) on "kuin lista jota ei voi muokata"

lista = [1, 2, 3, 4, 5]
print(lista)

monikko = (1,2, 3, 4, 5, 6)
print (monikko)
# monikon voi luoda ilman kaarisulkeita
monikko2 = 1, 2, 3, 4, 5
print(monikko2)

# monikko voi sis√§lt√§√§ erilaista tietoa
monikko3 = (1, 2, "nuutti", (3, 4), 88)
print(monikko3)

# luetaan listan eka alkio
print(lista[0])
print (monikko[0])

# Toisin kuin lista, monikko on kuitenkin muuttumaton: siihen ei voi lis√§t√§
# alkioita eik√§ siit√§ voi poistaa alkioita monikon luonnin j√§lkeen.

lista[0] = 0
lista.append(7)
print("muokattu lista", lista, "ensimm√§inen muutettu nollaksi ja viimeiseksi lis√§tty 7")


# Monikkoa on tarkoituksenmukaista k√§ytt√§√§ tilanteissa, joissa alkioiden jono on
# luonteeltaan staattinen: tiedet√§√§n, ett√§ muutoksille ei ole tarvetta ohjelman suorituksen aikana.
# t√§m√§ ei toimi monikolla, on muokkaamaton
# monikko[0] = 0

luku = monikko[4]
print("hain t√§m√§n monikosta: ", luku)

#t√§m√§ oli vain esimerkist√§
'''
viikonp√§iv√§t = ("maanantai", "tiistai", "keskiviikko", "torstai", "perjantai", "lauantai", "sunnuntai")
j√§rjestysnumero = int(input("Anna viikonp√§iv√§n j√§rjestysnumero (1-7): "))
viikonp√§iv√§ = viikonp√§iv√§t[j√§rjestysnumero-1]
print (f"{j√§rjestysnumero}. viikonp√§iv√§ on {viikonp√§iv√§}.")
'''

# Monikon l√§pik√§ynti samalla tavalla kuin listan.

sanat = ("eka", "toka", "kolmas", "nelj√§s", "viides")
for sana in sanat:
    print(sana)
    if sana == "nelj√§s":
        print ("sana nelj√§s l√∂ytyi!!!")

if "viides" in sanat:
    print("sana viides l√∂ytyi!!!!!!!!!11")

# Monikon arvojen purku muuttujiin

hedelm√§t = ("Mansikka", "Banaani", "Ananas")
print(hedelm√§t)
(eka, toka, kolmas) = hedelm√§t
print ("Monikko purettu muuttujiin, t√§ss√§ eka", eka)

# Monikon voi antaa funktiolle parametrina

def tulosta_monikko(hedelm√§t):
    for h in hedelm√§t:
        print(h)

tulosta_monikko(hedelm√§t)

# Monikko funktionpaluuarvona
# Yksinkertaistetaan random

def heit√§1():
    noppa1 = random.randint(1, 6)
    noppa2 = random.randint(1, 6)
    #print(f"nopista tuli silm√§luvut {noppa1}, {noppa2}")

    noppa1, noppa2 = random.randint(1, 6), random.randint(1, 6)
    print(f"nopista heit√§1 tuli silm√§luvut {noppa1, noppa2}")
heit√§1()


def heit√§2():
    noppa1, noppa2 = random.randint(1, 6), random.randint(1, 6)
    print(f"nopista heit√§2 tuli silm√§luvut {noppa1, noppa2}")
heit√§2()


def heit√§3():
    noppa1, noppa2 = random.randint(1, 6), random.randint(1, 6)
    print(f"nopista tuli silm√§luvut {noppa1, noppa2}")
heit√§3()

#noppa1, noppa2 = heit√§3()
#print("funktiosta heit√§3 palautu arvot:", noppa1, noppa2)

print("--------------------------")

# Joukko (set) on j√§rjest√§m√§t√∂n tietorakenne, eli sen alkiot voivat olla miss√§ tahansa j√§rjestyksess√§.
# Koska joukon alkioille ei ole m√§√§ritelty j√§rjestyst√§, ei alkioihin voi my√∂sk√§√§n viitata indeksill√§.
# Toisin kuin listassa tai monikossa, sama alkio voi esiinty√§ joukossa vain kertaalleen,
# eli joukossa ei voi olla kahta samansis√§lt√∂ist√§ alkiota.

joukko = {1, 2, 3, 4, 5, 6}
print(joukko)

numeroiden_lista = [1, 2, 3, 4, 5, 6, 6]
numeroiden_monikko = (1, 2, 3, 4, 5, 6, 6)
print(f"numero 6 EI voi esiinty√§ joukossa useasti")
numeroiden_joukko = {1, 2, 3, 4, 5, 6,6}
print(numeroiden_joukko)

numeroiden_joukko.add(6)
numeroiden_joukko.add(7)
print(numeroiden_joukko)
numeroiden_joukko.remove(1)
print(numeroiden_joukko)

pelit = {"Monopoli", "Shakki", "Cluedo", "Muuttuva labyrintti", "Kimble"}
print(pelit)
pelit.remove("Monopoli")
print(pelit)


# alkioiden iteroiminen l√§pi for/in rakentellaa
# indeksiin ei voi tosiaan t√§ss√§ viitata
for p in pelit:
    print(p)

if "Kimble" in pelit:
    print (f"Kimble l√∂ytyi üòäüëå")

print("-----------------------")



autolista = []
autolista.append('Lexus')
print(autolista)
print(type(autolista))


# tyhj√§ joukko luodaan listaan verrattuna eri tavalla, set-funktion avulla

autojoukko = set()
autojoukko.add("Audi")
print(autojoukko)
print(type(autojoukko))

# jos yrit√§t luoda tyhj√§√§ joukkoa {}- aaltosulkeilla, t√§st√§ tulee sen j√§lkeen sanakirja
# t√§ss√§ ihmetell√§√§n mik√§ on sanakirja

print("SANAKIRJA\n")

# Sanakirja (dictionary on Pythonin k√§ytetyimpi√§ tietorakenteita.
# sanakirjaan voidaan tallentaa avain-arvopareja.


# kun sanakirja alustetaan, annetaan avain-arvopari seuraavasti AVAIN : ARVO
# per√§kk√§iset avain-arvoparit erotellaan pilkuilla

oppilaat = {"Amber": 43,
            "Bonny": 23,
            "Clint": 57,
            "Daniel": 34,
            "Eemeli": 20
}
print(oppilaat)

# mit√§ ovat tietueet (items) sanakirjassa
print(oppilaat.items())

# mit√§ ovat avaimet sanakirjassa
print(oppilaat.keys())

# mit√§ ovat arvot / values sanakirjassa
print(oppilaat.values())

# k√§yd√§√§n l√§pi sanakirja nyt for / in rakenteilla
# kierrosmuuttuja eli t√§ss√§ tapauksessa o saa arvokseen
# kukin sanakirjassa esiintyv√§n AVAIMEN
for o in oppilaat:
    print(o)

avain = "Amber"
oppilaat[avain]
print("Etsit√§√§n avaimella AMBER h√§nen ik√§", oppilaat["Amber"])
print(f"Danielin ik√§ {oppilaat["Daniel"]}")

for o in oppilaat:
    print(f"oppilaan nimi {o} ik√§ on {oppilaat[o]} ")

# hae haluttu ik√§ if / in rakennetta k√§ytt√§en
# 1. pyyd√§ k√§ytt√§j√§lt√§ nimi ja haetaan se sanakirjasta


nimi = input("anna nimi jota etsit sanakirjasta: ")
if nimi in oppilaat:
    ik√§ = oppilaat[nimi] # haetaan avaimella arvo
    print (f"oppilaan nimi l√∂ytyi"
           f"h√§nen ik√§ on {ik√§}")
else:
    print(f"Nime√§ {nimi} ei l√∂ytynyt")


yhteystiedot = {
    "Amber": {
        "puh": "045642263",
        "osoite": "Kauratie 4"
    },
    "Bonny": {
        "puh": "0464358437",
        "osoite": "Luksuskuja 9"
    },
    "Clint": {
        "puh": "05043285439",
        "osoite": "Kattopolku 52"
    },
}
print(f"Amberin puhelinnumero {yhteystiedot["Amber"]["puh"]}")

oppilaat2 = {"Amber": 43,
            "Bonny": 23,
            "Clint": 57,
            "Daniel": 34,
            "Eemeli": 20,
            "Emma" : [1, 2, 3, 4]
}

# lis√§t√§√§n uusi oppilas
# llis√§t√§√§n avaimen avulla, mik√§li avain jo l√∂ytyy niin t√§m√§ p√§ivitt√§√§ tiedot

oppilaat2 ["Juuso"] = 22
oppilaat2["Amber"] = [22, 53, "muutin t√§m√§n"]
oppilaat2["Amber"] = "Morooo"
oppilaat2["Amber"] = 66
print(oppilaat2)

# muokkaa jos on olemassa, muuten lis√§√§
oppilaat2.update({"Timo": 88, "Laura": 75, "Daniel": 33})
print(oppilaat2)


